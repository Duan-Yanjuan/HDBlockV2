/**
 * HEBlock model file
 */

namespace org.acme.hdb

// participants

participant HDB identified by HDBId {
    o String HDBId
    o String address
    o String officeNumber
}

participant ICA identified by ICAId {
    o String ICAId
    o String address
    o String officeNumber
}

participant IRAS identified by IRASId {
    o String IRASId
    o String address
    o String officeNumber
}

// HDBlock will be a participant actor on behalf of clients (tenants and landlords)
participant HDBlock identified by HDBlockId {
    o String HDBlockId
    o String address
    o String officeNumber
    --> Tenant[] tenantList
    --> Landlord[] landlordList
}
//end of participant

// Assets
abstract asset Client identified by id {
    o String id
    o String email
    o String firstName
    o String lastName
    o String DOB
    o String ICStatus default = "Pending"  // Pending, Valid, Invalid
}

asset Landlord extends Client {
    --> House house optional
}

asset Tenant extends Client {
    --> TenancyAgreement agreement optional // current active agreement
}

asset House identified by houseId {
    o String houseId // format: Postal code + Unit
    o String address
    o String status default = "Pending" // Pending, Valid, Rented, Available, Invalid
    o String type
    --> Landlord landlord
    --> Tenant[] tenants optional
}

asset TenancyAgreement identified by agreementId {
    o String agreementId // format: postal code + unitNo. + date created (e.g. 53070909108_01012018)
    o DateTime dateCreated
    o DateTime startDate //start rental date
    o DateTime endDate optional
    o Integer duration //number of days e.g. 180 days
    o Double securityDeposit
    o Double advanceRentalFee
    o Double rentalFee
    o String status default = "Pending" // Pending, Signed, Valid (after payment of stamp duty), Active, End, Invalid (e.g. when house is deactivated by HDB)
    o Integer numOfTenants default = 0
    o Boolean isStampDutyPaid default = false
    --> StampCertificate stampCertificate optional
    --> DepositCertificate depositCertificate optional
    --> House house
    --> Landlord landlord
    --> TenancySignature[] signatureList optional
}

// New assets of tenancy signature will be created when landlord created and signed the tenancy agreement, or update tenants
asset TenancySignature identified by signatureId {
    o String signatureId
    o Boolean isSigned default = false
    --> Tenant tenant
    --> TenancyAgreement agreement optional
}

asset StampCertificate identified by certificateId {
    o String certificateId
    o DateTime dateCreated
    o Double amount
    --> TenancyAgreement agreement
}

asset DepositCertificate identified by recordId {
    o String recordId
    o DateTime dateCreated
    o Double amount
    --> TenancyAgreement agreement
}
//end of asset

// Transactions
transaction RegisterAsTenant {
    o String id
    o String email
    o String firstName
    o String lastName
    o String DOB
}

transaction RegisterAsLandlord {
    o String id
    o String email
    o String firstName
    o String lastName
    o String DOB
}
  
transaction RegisterHouse {
    o String houseId
    o String address
    o String type
    --> Landlord landlord
} 

transaction ApproveTenantIdentity {
    --> Tenant tenant
}

transaction ApproveLandlordIdentity {
    --> Landlord landlord
}

transaction ApproveHouse {
    --> House house
}

transaction UpdateTenantStatus {
  o String status
  --> Tenant tenant
}

transaction UpdateLandlordStatus {
  o String status
  --> Landlord landlord
}
  
transaction UpdateHouseStatus {
  o String status
  --> House house
}

// a list of tenancy signatures will be created
transaction CreateTenancyAgreement {
    o String agreementId 
    o DateTime startDate
    o Integer duration
    o Double securityDeposit
    o Double advanceRentalFee
    o Double rentalFee
    --> Tenant[] tenants
    --> House house
}
  
// signed by tenants
transaction SignTenancyAgreement {
    --> TenancySignature signature
}

transaction UpdateTenancyAgreement {
    --> TenancyAgreement agreement
}

transaction PayStampDuty {
    o String certificateId
    o Double amount
    --> TenancyAgreement agreement
}
  
transaction ActivateTenancyAgreement {
    --> TenancyAgreement agreement
}
  
transaction EndTenancyAgreement {
    --> TenancyAgreement agreement
}
  
transaction PaySecurityDeposit {
    o String recordId
    o Double amount
    --> TenancyAgreement agreement
}
  
transaction PayAdvanceFee {
    o Double amount
    --> TenancyAgreement agreement
}
  
/* to be implemented in future
transaction AddNewTenant {
    --> TenancySignature signature
    --> House house
    --> TenancyAgreement agreement
}

transaction RenewTenancyAgreement {
    o Integer duration //number of days
    o String start // start date of rent
    o Double rental // rental fee 
    --> TenancyAgreement oldAgreement
}
*/
  